<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>React-学习整理</title>
      <link href="/2018/03/05/React-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>当你调用setState的时候，发生了什么事？<br>当调用 setState 时，React会做的第一件事情是将传递给 setState 的对象合并到组件的当前状态。这将启动一个称为和解（reconciliation）的过程。和解（reconciliation）的最终目标是以最有效的方式，根据这个新的状态来更新UI。 为此，React将构建一个新的 React 元素树（您可以将其视为 UI 的对象表示）。</p><p>一旦有了这个树，为了弄清 UI 如何响应新的状态而改变，React 会将这个新树与上一个元素树相比较（ diff ）。</p><p>通过这样做， React 将会知道发生的确切变化，并且通过了解发生什么变化，只需在绝对必要的情况下进行更新即可最小化 UI 的占用空间。</p><p>在 React 当中 Element 和 Component 有何区别？<br>简单地说，一个 React element 描述了你想在屏幕上看到什么。换个说法就是，一个 React element 是一些 UI 的对象表示。</p><p>一个 React Component 是一个函数或一个类，它可以接受输入并返回一个 React element t（通常是通过 JSX ，它被转化成一个 createElement 调用）。</p><p>有关更多信息，请查看 React Elements vs React Components</p><p>什么时候在功能组件( Class Component )上使用类组件( Functional Component )？<br>如果您的组件具有状态( state )或生命周期方法，请使用 Class 组件。否则，使用功能组件</p><p>什么是 React 的 refs ，为什么它们很重要？<br>refs就像是一个逃生舱口，允许您直接访问DOM元素或组件实例。为了使用它们，您可以向组件添加一个 ref 属性，该属性的值是一个回调函数，它将接收底层的 DOM 元素或组件的已挂接实例，作为其第一个参数。</p><p>class UnControlledForm extends Component {<br>  handleSubmit = () =&gt; {<br>    console.log(“Input Value: “, this.input.value)<br>  }<br>  render () {<br>    return (<br>      <form onsubmit="{this.handleSubmit}"><br>        <input type="text" ref="{(input)" ==""> this.input = input} /&gt;<br>        <button type="submit">Submit</button><br>      </form><br>    )<br>  }<br>}<br>以上注意到我们的输入字段有一个 ref 属性，其值是一个函数。该函数接收我们然后放在实例上的实际的 DOM 元素，以便在 handleSubmit 函数内部访问它。经常误解的是，您需要使用类组件才能使用 ref ，但 ref 也可以通过利用 JavaScript 中的 闭包 与 功能组件( functional components )一起使用。</p><p>function CustomForm ({handleSubmit}) {<br>  let inputElement<br>  return (<br>    <form onsubmit="{()" ==""> handleSubmit(inputElement.value)}&gt;<br>      <input type="text" ref="{(input)" ==""> inputElement = input} /&gt;<br>      <button type="submit">Submit</button><br>    </form><br>  )<br>}<br>React 中的keys是什么，为什么它们很重要？<br>keys是什么帮助 React 跟踪哪些项目已更改、添加或从列表中删除。</p><p>  return (<br>    <ul><br>      {this.state.todoItems.map(({task, uid}) =&gt; {<br>        return <li key="{uid}">{task}</li><br>      })}<br>    </ul><br>  )<br>}<br>每个 keys 在兄弟元素之间是独一无二的。我们已经谈过几次关于和解（reconciliation）的过程，而且这个和解过程（reconciliation）中的一部分正在执行一个新的元素树与最前一个的差异。keys 使处理列表时更加高效，因为 React 可以使用子元素上的 keys 快速知道元素是新的还是在比较树时才被移动。</p><p>而且 keys 不仅使这个过程更有效率，而且没有 keys ，React 不知道哪个本地状态对应于移动中的哪个项目。所以当你 map 的时候，不要忽略了 keys 。</p><p>看下面的代码: 如果您在 下创建了一个 React 元素， 的组件定义将如何？</p><p><twitter username="tylermcginnis33"><br>  {(user) =&gt; user === null<br>    ? <loading><br>    : <badge info="{user}">}<br></badge></loading></twitter><br>import React, { Component, PropTypes } from ‘react’<br>import fetchUser from ‘twitter’<br>// fetchUser接收用户名返回 promise<br>// 当得到 用户的数据的时候 ，返回resolve 状态</p><p>class Twitter extends Component {<br>  // 在这里写下你的代码<br>}<br>如果你不熟悉渲染回调模式（render callback pattern），这将看起来有点奇怪。在这种模式中，一个组件接收一个函数作为它的 child。注意上面包含在 标签内的内容。 Twitter 组件的 child 是一个函数，而不是你曾经习以为常的一个组件。 这意味着在实现 Twitter 组件时，我们需要将 props.children 作为一个函数来处理。</p><p>以下是我的答案。</p><p>import React, { Component, PropTypes } from ‘react’<br>import fetchUser from ‘twitter’</p><p>class Twitter extends Component {<br>  state = {<br>    user: null,<br>  }<br>  static propTypes = {<br>    username: PropTypes.string.isRequired,<br>  }<br>  componentDidMount () {<br>    fetchUser(this.props.username)<br>      .then((user) =&gt; this.setState({user}))<br>  }<br>  render () {<br>    return this.props.children(this.state.user)<br>  }<br>}<br>值得注意的是，正如我上面提到的，我通过调用它并传递给 user 来把 props.children 处理为为一个函数。</p><p>这种模式的好处是我们已经将我们的父组件与我们的子组件分离了。父组件管理状态，父组件的消费者可以决定以何种方式将从父级接收的参数应用于他们的 UI。</p><p>为了演示这一点，我们假设在另一个文件中，我们要渲染一个 Profile 而不是一个 Badge, ，因为我们使用渲染回调模式，所以我们可以轻松地交换 UI ，而不用改变我们对父（Twitter）组件的实现。</p><p><twitter username="tylermcginnis33"><br>  {(user) =&gt; user === null<br>    ? <loading><br>    : <profile info="{user}">}<br></profile></loading></twitter><br>受控组件( controlled component )与不受控制的组件( uncontrolled component )有什么区别？<br>React 的很大一部分是这样的想法，即组件负责控制和管理自己的状态。</p><p>当我们将 native HTML 表单元素（ input, select, textarea 等）投入到组合中时会发生什么？我们是否应该使用 React 作为“单一的真理来源”，就像我们习惯使用React一样？ 或者我们是否允许表单数据存在 DOM 中，就像我们习惯使用HTML表单元素一样？ 这两个问题是受控（controlled） VS 不受控制（uncontrolled）组件的核心。</p><p>受控组件是React控制的组件，也是表单数据的唯一真理来源。</p><p>如下所示， username 不存在于 DOM 中，而是以我们的组件状态存在。每当我们想要更新 username 时，我们就像以前一样调用setState。</p><p>class ControlledForm extends Component {<br>  state = {<br>    username: ‘’<br>  }<br>  updateUsername = (e) =&gt; {<br>    this.setState({<br>      username: e.target.value,<br>    })<br>  }<br>  handleSubmit = () =&gt; {}<br>  render () {<br>    return (<br>      <form onsubmit="{this.handleSubmit}"><br>        <input type="text" value="{this.state.username}" onchange="{this.updateUsername}"><br>        <button type="submit">Submit</button><br>      </form><br>    )<br>  }<br>}<br>不受控制( uncontrolled component )的组件是您的表单数据由 DOM 处理，而不是您的 React 组件。</p><p>我们使用 refs 来完成这个。</p><p>class UnControlledForm extends Component {<br>  handleSubmit = () =&gt; {<br>    console.log(“Input Value: “, this.input.value)<br>  }<br>  render () {<br>    return (<br>      <form onsubmit="{this.handleSubmit}"><br>        <input type="text" ref="{(input)" ==""> this.input = input} /&gt;<br>        <button type="submit">Submit</button><br>      </form><br>    )<br>  }<br>}<br>虽然不受控制的组件通常更容易实现，因为您只需使用引用从DOM获取值，但是通常建议您通过不受控制的组件来支持受控组件。</p><p>主要原因是受控组件 支持即时字段验证 ，允许您有条件地禁用/启用按钮，强制输入格式，并且更多的是 『the React way』。</p><p>在哪个生命周期事件中你会发出 AJAX 请求，为什么？<br>AJAX 请求应该在 componentDidMount 生命周期事件中。 有几个原因:</p><p>Fiber，是下一次实施React的和解算法，将有能力根据需要启动和停止渲染，以获得性能优势。其中一个取舍之一是 componentWillMount ，而在其他的生命周期事件中出发 AJAX 请求，将是具有 “非确定性的”。 这意味着 React 可以在需要时感觉到不同的时间开始调用 componentWillMount。这显然是AJAX请求的不好的方式。<br>-您不能保证在组件挂载之前，AJAX请求将无法 resolve。如果这样做，那意味着你会尝试在一个未挂载的组件上设置 StState，这不仅不会起作用，反而会对你大喊大叫。 在 componentDidMount 中执行 AJAX 将保证至少有一个要更新的组件。</p><p>shouldComponentUpdate 应该做什么，为什么它很重要？<br>上面我们讨论了 reconciliation ，什么是 React 在 setState 被调用时所做的。在生命周期方法 shouldComponentUpdate 中，允许我们选择退出某些组件（和他们的子组件）的 reconciliation 过程。</p><p>我们为什么要这样做？</p><p>如上所述，“和解（ reconciliation ）的最终目标是以最有效的方式，根据新的状态更新用户界面”。如果我们知道我们的用户界面（UI）的某一部分不会改变，那么没有理由让 React 很麻烦地试图去弄清楚它是否应该渲染。通过从 shouldComponentUpdate 返回 false，React 将假定当前组件及其所有子组件将保持与当前组件相同。</p><p>您如何告诉React 构建（build）生产模式，该做什么？<br>通常，您将使用Webpack的 DefinePlugin 方法将 NODE_ENV 设置为 production。这将剥离像 propType 验证和额外的警告。除此之外，还有一个好主意，可以减少你的代码，因为React使用 Uglify 的 dead-code 来消除开发代码和注释，这将大大减少你的包的大小。</p><p>为什么要使用 React.Children.map（props.children，（）=&gt;） 而不是 props.children.map（（）=&gt;）</p><p>因为不能保证props.children将是一个数组。</p><p>以此代码为例，</p><p><parent><br>  <h1>Welcome.</h1><br></parent><br>在父组件内部，如果我们尝试使用 props.children.map 映射孩子，则会抛出错误，因为 props.children 是一个对象，而不是一个数组。</p><p>如果有多个子元素，React 只会使props.children成为一个数组。就像下面这样：</p><p><parent><br>  <h1>Welcome.</h1><br>  <h2>props.children will now be an array</h2><br></parent><br>这就是为什么你喜欢 React.Children.map ，因为它的实现考虑到 props.children 可能是一个数组或一个对象。</p><p>描述事件在React中的处理方式。<br>为了解决跨浏览器兼容性问题，您的 React 中的事件处理程序将传递 SyntheticEvent 的实例，它是 React 的浏览器本机事件的跨浏览器包装器。</p><p>这些 SyntheticEvent 与您习惯的原生事件具有相同的接口，除了它们在所有浏览器中都兼容。有趣的是，React 实际上并没有将事件附加到子节点本身。React 将使用单个事件监听器监听顶层的所有事件。这对于性能是有好处的，这也意味着在更新DOM时，React 不需要担心跟踪事件监听器。</p><p>createElement 和 cloneElement 有什么区别？<br>createElement 是 JSX 被转载到的，是 React 用来创建 React Elements 的内容(一些 UI 的对象表示)cloneElement用于克隆元素并传递新的 props。他们钉住了这两个��的命名。</p><p>可以选择性地传递给 setState 的第二个参数是什么，它的目的是什么？<br>一个回调函数，当setState结束并 re-rendered 该组件时将被调用。一些没有说出来的东西是 setState 是 异步 的，这就是为什么它需要一个第二个回调函数。通常最好使用另一个生命周期方法，而不是依赖这个回调函数，但是很高兴知道它存在。</p><p>this.setState(<br>  { username: ‘tylermcginnis33’ },<br>  () =&gt; console.log(‘setState has finished and the component has re-rendered.’)<br>)<br>这段代码有什么问题？<br>this.setState((prevState, props) =&gt; {<br>  return {<br>    streak: prevState.streak + props.count<br>  }<br>})<br>没毛病。但是这种写法很少被使用，并不是众所周知的，就是你也可以传递一个函数给setState，它接收到先前的状态和道具并返回一个新的状态，正如我们在上面所做的那样。它不仅没有什么问题，而且如果您根据以前的状态（state）设置状态，推荐使用这种写法。</p><p>转自<a href="http://johannlai.com/2017/04/09/React-Interview-Questions/" target="_blank" rel="noopener">http://johannlai.com/2017/04/09/React-Interview-Questions/</a> </p>]]></content>
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JS实现继承的几种方式</title>
      <link href="/2018/03/05/JS%E7%BB%A7%E6%89%BF/"/>
      <content type="html"><![CDATA[<p>前言</p><p>JS作为面向对象的弱类型语言，继承也是其非常强大的特性之一。那么如何在JS中实现继承呢？让我们拭目以待。</p><p>JS继承的实现方式<br>既然要实现继承，那么首先我们得有一个父类，代码如下：</p><p>// 定义一个动物类<br>function Animal (name) {<br>  // 属性<br>  this.name = name || ‘Animal’;<br>  // 实例方法<br>  this.sleep = function(){<br>    console.log(this.name + ‘正在睡觉！’);<br>  }<br>}<br>// 原型方法<br>Animal.prototype.eat = function(food) {<br>  console.log(this.name + ‘正在吃：’ + food);<br>};<br>1、原型链继承</p><p>核心： 将父类的实例作为子类的原型</p><p>function Cat(){<br>}<br>Cat.prototype = new Animal();<br>Cat.prototype.name = ‘cat’;</p><p>//　Test Code<br>var cat = new Cat();<br>console.log(cat.name);<br>console.log(cat.eat(‘fish’));<br>console.log(cat.sleep());<br>console.log(cat instanceof Animal); //true<br>console.log(cat instanceof Cat); //true<br>特点：</p><p>非常纯粹的继承关系，实例是子类的实例，也是父类的实例<br>父类新增原型方法/原型属性，子类都能访问到<br>简单，易于实现<br>缺点：</p><p>要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中<br>无法实现多继承<br>来自原型对象的引用属性是所有实例共享的（详细请看附录代码： 示例1）<br>创建子类实例时，无法向父类构造函数传参<br>推荐指数：★★（3、4两大致命缺陷）</p><p>2、构造继承</p><p>核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p><p>function Cat(name){<br>  Animal.call(this);<br>  this.name = name || ‘Tom’;<br>}</p><p>// Test Code<br>var cat = new Cat();<br>console.log(cat.name);<br>console.log(cat.sleep());<br>console.log(cat instanceof Animal); // false<br>console.log(cat instanceof Cat); // true<br>特点：</p><p>解决了1中，子类实例共享父类引用属性的问题<br>创建子类实例时，可以向父类传递参数<br>可以实现多继承（call多个父类对象）<br>缺点：</p><p>实例并不是父类的实例，只是子类的实例<br>只能继承父类的实例属性和方法，不能继承原型属性/方法<br>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能<br>推荐指数：★★（缺点3）</p><p>3、实例继承</p><p>核心：为父类实例添加新特性，作为子类实例返回</p><p>function Cat(name){<br>  var instance = new Animal();<br>  instance.name = name || ‘Tom’;<br>  return instance;<br>}</p><p>// Test Code<br>var cat = new Cat();<br>console.log(cat.name);<br>console.log(cat.sleep());<br>console.log(cat instanceof Animal); // true<br>console.log(cat instanceof Cat); // false<br>特点：</p><p>不限制调用方式，不管是new 子类()还是子类(),返回的对象具有相同的效果<br>缺点：</p><p>实例是父类的实例，不是子类的实例<br>不支持多继承<br>推荐指数：★★</p><p>4、拷贝继承</p><p>function Cat(name){<br>  var animal = new Animal();<br>  for(var p in animal){<br>    Cat.prototype[p] = animal[p];<br>  }<br>  Cat.prototype.name = name || ‘Tom’;<br>}</p><p>// Test Code<br>var cat = new Cat();<br>console.log(cat.name);<br>console.log(cat.sleep());<br>console.log(cat instanceof Animal); // false<br>console.log(cat instanceof Cat); // true<br>特点：</p><p>支持多继承<br>缺点：</p><p>效率较低，内存占用高（因为要拷贝父类的属性）<br>无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）<br>推荐指数：★（缺点1）</p><p>5、组合继承</p><p>核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p><p>function Cat(name){<br>  Animal.call(this);<br>  this.name = name || ‘Tom’;<br>}<br>Cat.prototype = new Animal();</p><p>// Test Code<br>var cat = new Cat();<br>console.log(cat.name);<br>console.log(cat.sleep());<br>console.log(cat instanceof Animal); // true<br>console.log(cat instanceof Cat); // true<br>特点：</p><p>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法<br>既是子类的实例，也是父类的实例<br>不存在引用属性共享问题<br>可传参<br>函数可复用<br>缺点：</p><p>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）<br>推荐指数：★★★★（仅仅多消耗了一点内存）</p><p>6、寄生组合继承</p><p>核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><p>function Cat(name){<br>  Animal.call(this);<br>  this.name = name || ‘Tom’;<br>}<br>(function(){<br>  // 创建一个没有实例方法的类<br>  var Super = function(){};<br>  Super.prototype = Animal.prototype;<br>  //将实例作为子类的原型<br>  Cat.prototype = new Super();<br>})();</p><p>// Test Code<br>var cat = new Cat();<br>console.log(cat.name);<br>console.log(cat.sleep());<br>console.log(cat instanceof Animal); // true<br>console.log(cat instanceof Cat); //true<br>特点：</p><p>堪称完美<br>缺点：</p><p>实现较为复杂<br>推荐指数：★★★★（实现复杂，扣掉一颗星）</p><p>附录代码：<br>示例一：</p><p>function Animal (name) {<br>  // 属性<br>  this.name = name || ‘Animal’;<br>  // 实例方法<br>  this.sleep = function(){<br>    console.log(this.name + ‘正在睡觉！’);<br>  }<br>  //实例引用属性<br>  this.features = [];<br>}<br>function Cat(name){<br>}<br>Cat.prototype = new Animal();</p><p>var tom = new Cat(‘Tom’);<br>var kissy = new Cat(‘Kissy’);</p><p>console.log(tom.name); // “Animal”<br>console.log(kissy.name); // “Animal”<br>console.log(tom.features); // []<br>console.log(kissy.features); // []</p><p>tom.name = ‘Tom-New Name’;<br>tom.features.push(‘eat’);</p><p>//针对父类实例值类型成员的更改，不影响<br>console.log(tom.name); // “Tom-New Name”<br>console.log(kissy.name); // “Animal”<br>//针对父类实例引用类型成员的更改，会通过影响其他子类实例<br>console.log(tom.features); // [‘eat’]<br>console.log(kissy.features); // [‘eat’]</p><p>原因分析：</p><p>关键点：属性查找过程</p><p>执行tom.features.push，首先找tom对象的实例属性（找不到），<br>那么去原型对象中找，也就是Animal的实例。发现有，那么就直接在这个对象的<br>features属性中插入值。<br>在console.log(kissy.features); 的时候。同上，kissy实例上没有，那么去原型上找。<br>刚好原型上有，就直接返回，但是注意，这个原型对象中features属性值已经变化了。</p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue2.0-学习总结</title>
      <link href="/2018/03/05/vue2.0-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>1、active-class是哪个组件的属性？嵌套路由怎么定义？</p><p>答：vue-router模块的router-link组件。<br>2、怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</p><p>答：在router目录下的index.js文件中，对path属性加上/:id。  使用router对象的params.id<br>3、vue-router有哪几种导航钩子？</p><p>答：三种，一种是全局导航钩子：router.beforeEach(to,from,next)，<br>作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件<br>4、scss是什么？安装使用的步骤是？有哪几大特性？</p><p>答：预处理css，把css当前函数编写，定义变量,嵌套。<br> 先装css-loader、node-loader、sass-loader等加载器模块，<br> 在webpack-base.config.js配置文件中加多一个拓展:extenstion，<br> 再加多一个模块：module里面test、loader<br>4.1、scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？</p><p>答：css的预编译。<br>使用步骤：<br>第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）<br>第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss<br>第三步：还是在同一个文件，配置一个module属性<br>第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”<br>有哪几大特性:<br>1、可以用变量，例如（$变量名称=值）；<br>2、可以用混合器，例如（）<br>3、可以嵌套<br>5、mint-ui是什么？怎么使用？说出至少三个组件使用方法？</p><p>答：基于vue的前端组件库。npm安装，然后import样式和js，<br>vue.use（mintUi）全局引入。在单个组件局部引入：<br>import {Toast} from ‘mint-ui’。组件一：<br>Toast(‘登录成功’)；组件二：mint-header；组件三：mint-swiper<br>6、v-model是什么？怎么使用？ vue中标签怎么绑定事件？</p><p>答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。<br>vue的model层的data属性。绑定事件：<input @click="doLog()"><br>7、axios是什么？怎么使用？描述使用它实现登录功能的流程？</p><p>答：请求后台资源的模块。npm install axios -S装好，<br>然后发送的是跨域，需在配置文件中config/index.js进行设置。<br>后台如果是Tp5则定义一个资源路由。js中使用import进来，<br>然后.get或.post。返回在.then函数中如果成功，<br>失败则是在.catch函数中<br>8、axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢？</p><p>答：跨域，添加用户操作，更新操作。<br>9、什么是RESTful API？怎么使用?</p><p>答：是一个api的标准，无状态请求。请求的路由地址是固定的，<br>如果是tp5则先路由配置中把资源路由配置好。标准有：.post .put .delete<br>10、vuex是什么？怎么使用？哪种功能场景使用它？</p><p>答：vue框架中状态管理。在main.js引入store，注入。<br>新建了一个目录store，….. export 。<br>场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车<br>11、mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？</p><p>答：一个model+view+viewModel框架，数据模型model，viewModel连接两个<br>区别：vue数据驱动，通过数据来显示视图层而不是节点操作。<br>场景：数据操作比较多的场景，更加便捷<br>12、自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？</p><p>答：全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives<br>钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）<br>钩子函数参数：el、binding<br>13、说出至少4种vue当中的指令和它的用法？</p><p>答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定<br>14、vue-router是什么？它有哪些组件？</p><p>答：vue用来写路由一个插件。router-link、router-view<br>15、导航钩子有哪些？它们有哪些参数？</p><p>答：导航钩子有：a/全局钩子和组件内独享的钩子。b/beforeRouteEnter、afterEnter、beforeRouterUpdate、beforeRouteLeave<br>参数：有to（去的那个路由）、from（离开的路由）、next（一定要用这个函数才能去到下一个路由，如果不用就拦截）最常用就这几种<br>16、Vue的双向数据绑定原理是什么？</p><p>答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>具体步骤：<br>第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter<br>这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化<br>第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图<br>第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。<br>第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。<br>ps：16题答案同样适合”vue data是怎么实现的？”此面试题。<br>17、请详细说下你对vue生命周期的理解？</p><p>答：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。<br>创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。<br>载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。<br>更新前/后：当data变化时，会触发beforeUpdate和updated方法。<br>销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在<br>18、请说下封装 vue 组件的过程？</p><p>答：首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。<br>然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。<br>19、你是怎么认识vuex的？</p><p>答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。<br>通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。<br>应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。<br>20、vue-loader是什么？使用它的用途有哪些？</p><p>答：解析.vue文件的一个加载器，跟template/js/style转换成js模块。<br>用途：js可以写es6、style样式可以scss或less、template可以加jade等<br>21、请说出vue.cli项目中src目录每个文件夹和文件的用法？</p><p>答：assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是一个应用主组件；main.js是入口文件<br>22、vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？</p><p>答：第一步：在components目录新建你的组件文件（smithButton.vue），script一定要export default {<br>第二步：在需要用的页面（组件）中导入：import smithButton from ‘../components/smithButton.vue’<br>第三步：注入到vue的子组件的components属性上面,components:{smithButton}<br>第四步：在template视图view中使用，<smith-button>  </smith-button><br>问题有：smithButton命名，使用的时候则smith-button。<br>23、聊聊你对Vue.js的template编译的理解？</p><p>答：简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）<br>详情步骤：<br>首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。<br>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）<br>24、vue的组件是怎么定义的？父组件怎么给子组件传值？</p><p>答：首先注册vue.components，第一个参数是组件名称，第二个参数是选项。<br>直接绑定一个属性，然后在子组件props里面接收<br>25、使用过element.ui吗？说下它其中两个组件的使用方法？</p><p>答：使用过用过一个布局的，它是由24份，它的写法是:span后面带的数字它占24份里面的宽度。:offset是它<br>的间距，后面也是跟数字，也是从24份里面取的。<br>input按钮，标签是el-input，后面type跟上一个属性就是显示不同按钮的类型，有默认的default<br>（默认的）、success（成功的）、warning（警告）、danger（危险）、info（）、primary（）<br>26、说下你对mvvm的理解？双向绑定的理解?</p><p>答：mvvm就是vm框架视图、m模型就是用来定义驱动的数据、v经过数据改变后的html、vm就是用来实现双向绑定<br>    双向绑定:一个变了另外一个跟着变了，例如：视图一个绑定了模型的节点有变化，模型对应的值会跟着变<br>27、说出你所使用过的vue指令</p><p>答：v-on（监听事件、@change、@click）、v-if（判断的）、v-show（显示/隐藏）、v-bind（绑定属性、:disabled、:src）<br>28、你觉得怎样的自定义组件是完善的？至少说出4点</p><p>答：第一点、可以通用<br>第二点、代码尽量简洁<br>第三点、容易修改<br>第四点、功能要多一点<br>一、请说下具体使用vue的理解？</p><p>答：1、使用vue不必担心布局更改和类名重复导致的js重写，因为它是靠数据驱动双向绑定，底层是通过Object.defineProperty() 定义的数据 set、get 函数原理实现。<br>2、组件化开发，让项目的可拓展性、移植性更好，代码重用性更高，就好像农民工建房子，拿起自己的工具包就可以开工。项目经理坐等收楼就好。<br>3、单页应用的体验零距离接触安卓原生应用，局部组件更新界面，让用户体验更快速省时。<br>4、js的代码无形的规范，团队合作开发代码可阅读性更高。<br>二、你觉得哪些项目适合vue框架？</p><p>答：1、数据信息量比较多的，反之类似企业网站就无需此框架了。<br>2、手机web和app应用多端共用一套界面的项目，因为使用vue.cli+webpack后的前端目录，非常有利于项目的跨平台部署。<br>三、怎么理解MVVM模式的这些框架？</p><p>答：1、M就是Model模型层，存的一个数据对象。<br>2、V就是View视图层，所有的html节点在这一层。<br>3、VM就是ViewModel，它通过data属性连接Model模型层，通过el属性连接View视图层。<br>四、PC端项目你会在哪些场景使用Vue框架？</p><p>答：上万级数据需要瀑布流更新和搜索的时候，因为数据庞大的时候，用原生的dom操作js和html都会有列表的html布局，迭代很困难。再一个dom节点的大面积添加会影响性能。<br>那么vue为什么解决这些问题呢？<br>第一：只需用v-for在view层一个地方遍历数据即可，无需复制一段html代码在js和html两个地方。<br>第二：vue通过Virtual Dom就是在js中模拟DOM对象树来优化DOM操作。<br>vuex<br>1、vuex有哪几种属性？</p><p>答：有五种，分别是 State、 Getter、Mutation 、Action、 Module<br>2、vuex的State特性是？</p><p>答：<br>一、Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放地，对应于与一般Vue对象里面的data<br>二、state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新<br>三、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中<br>3、vuex的Getter特性是？</p><p>答：<br>一、getters 可以对State进行计算操作，它就是Store的计算属性<br>二、 虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用<br>三、 如果一个状态只在一个组件内使用，是可以不用getters<br>4、vuex的Mutation特性是？</p><p>答：<br>一、Action 类似于 mutation，不同在于：<br>二、Action 提交的是 mutation，而不是直接变更状态。<br>三、Action 可以包含任意异步操作<br>5、Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？</p><p>答：<br>一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里。<br>二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用，并包装成promise返回，在调用处用async await处理返回的数据。如果不要复用这个请求，那么直接写在vue文件里很方便。<br>6、不用Vuex会带来什么问题？</p><p>答：<br>一、可维护性会下降，你要想修改数据，你得维护三个地方<br>二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的<br>三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来Vue用Component就是为了减少耦合，现在这么用，和组件化的初衷相背。<br>生命周期<br>1、什么是vue生命周期？</p><p>答： Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。<br>2、vue生命周期的作用是什么？</p><p>答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。<br>3、vue生命周期总共有几个阶段？</p><p>答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后<br>4、第一次页面加载会触发哪几个钩子？</p><p>答：第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子<br>5、DOM 渲染在 哪个周期中就已经完成？<br>答：DOM 渲染在 mounted 中就已经完成了。</p><p>6、简单描述每个周期具体适合哪些场景？</p><p>答：生命周期钩子的一些使用方法： beforecreate : 可以在这加个loading事件，在加载实例时触发 created : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用 mounted : 挂载元素，获取到DOM节点 updated : 如果对数据统一处理，在这里写上相应函数 beforeDestroy : 可以做一个确认停止事件的确认框 nextTick : 更新数据后立即操作dom<br>axios<br>1、axios的特点有哪些？</p><p>答：<br>一、Axios 是一个基于 promise 的 HTTP 库，支持promise所有的API<br>二、它可以拦截请求和响应<br>三、它可以转换请求数据和响应数据，并对响应回来的内容自动转换成 JSON类型的数据<br>四、安全性更高，客户端支持防御 XSRF<br>2、axios有哪些常用方法？</p><p>答：<br>一、axios.get(url[, config])   //get请求用于列表和信息查询<br>二、axios.delete(url[, config])  //删除<br>三、axios.post(url[, data[, config]])  //post请求用于信息的添加<br>四、axios.put(url[, data[, config]])  //更新操作<br>3、说下你了解的axios相关配置属性？</p><p>答：<br><code>url</code>是用于请求的服务器URL</p><p><code>method</code>是创建请求时使用的方法,默认是get</p><p><code>baseURL</code>将自动加在<code>url</code>前面，除非<code>url</code>是一个绝对URL。它可以通过设置一个<code>baseURL</code>便于为axios实例的方法传递相对URL</p><p><code>transformRequest</code>允许在向服务器发送前，修改请求数据，只能用在’PUT’,’POST’和’PATCH’这几个请求方法</p><p><code>headers</code>是即将被发送的自定义请求头<br>headers:{‘X-Requested-With’:’XMLHttpRequest’},</p><p><code>params</code>是即将与请求一起发送的URL参数，必须是一个无格式对象(plainobject)或URLSearchParams对象<br>params:{<br>ID:12345<br>},</p><p><code>auth</code>表示应该使用HTTP基础验证，并提供凭据<br>这将设置一个<code>Authorization</code>头，覆写掉现有的任意使用<code>headers</code>设置的自定义<code>Authorization</code>头<br>auth:{<br>username:’janedoe’,<br>password:’s00pers3cret’<br>},</p><p>‘proxy’定义代理服务器的主机名称和端口<br><code>auth</code>表示HTTP基础验证应当用于连接代理，并提供凭据<br>这将会设置一个<code>Proxy-Authorization</code>头，覆写掉已有的通过使用<code>header</code>设置的自定义<code>Proxy-Authorization</code>头。<br>proxy:{<br>host:’127.0.0.1’,<br>port:9000,<br>auth::{<br>username:’mikeymike’,<br>password:’rapunz3l’<br>}<br>},<br>keep-alive</p><p>vue性能</p><p>polyfill imort引入并执行 应用场景：页面开始一片空白<br>1、vue响应式原理？<br>2、vue-router实现原理？<br>3、为什么要选vue？与其它框架对比的优势和劣势？<br>4、vue如何实现父子组件通信，以及非父子组件通信？<br>5、vuejs与angularjs以及react的区别？<br>6、vuex是用来做什么的？<br>7、vue源码结构</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS原型、原型链</title>
      <link href="/2018/03/05/JS%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <content type="html"><![CDATA[<p>一. 普通对象与函数对象</p><p>JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象，Object 、Function 是 JS 自带的函数对象。下面举例说明</p><p>var o1 = {};<br>var o2 =new Object();<br>var o3 = new f1();</p><p>function f1(){};<br>var f2 = function(){};<br>var f3 = new Function(‘str’,’console.log(str)’);</p><p>console.log(typeof Object); //function<br>console.log(typeof Function); //function  </p><p>console.log(typeof f1); //function<br>console.log(typeof f2); //function<br>console.log(typeof f3); //function   </p><p>console.log(typeof o1); //object<br>console.log(typeof o2); //object<br>console.log(typeof o3); //object<br>在上面的例子中 o1 o2 o3 为普通对象，f1 f2 f3 为函数对象。怎么区分，其实很简单，凡是通过 new Function() 创建的对象都是函数对象，其他的都是普通对象。f1,f2,归根结底都是通过 new Function()的方式进行创建的。Function Object 也都是通过 New Function()创建的。</p><p>一定要分清楚普通对象和函数对象，下面我们会常常用到它。</p><p>二. 构造函数</p><p>我们先复习一下构造函数的知识：</p><p>function Person(name, age, job) {<br> this.name = name;<br> this.age = age;<br> this.job = job;<br> this.sayName = function() { alert(this.name) }<br>}<br>var person1 = new Person(‘Zaxlct’, 28, ‘Software Engineer’);<br>var person2 = new Person(‘Mick’, 23, ‘Doctor’);<br>上面的例子中 person1 和 person2 都是 Person 的实例。这两个实例都有一个 constructor （构造函数）属性，该属性（是一个指针）指向 Person。 即：</p><p>  console.log(person1.constructor == Person); //true<br>  console.log(person2.constructor == Person); //true<br>我们要记住两个概念（构造函数，实例）：<br>person1 和 person2 都是 构造函数 Person 的实例<br>一个公式：<br>实例的构造函数属性（constructor）指向构造函数。</p><p>三. 原型对象</p><p>在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个prototype 属性，这个属性指向函数的原型对象。（先用不管什么是 <strong>proto</strong> 第二节的课程会详细的剖析）</p><p>function Person() {}<br>Person.prototype.name = ‘Zaxlct’;<br>Person.prototype.age  = 28;<br>Person.prototype.job  = ‘Software Engineer’;<br>Person.prototype.sayName = function() {<br>  alert(this.name);<br>}</p><p>var person1 = new Person();<br>person1.sayName(); // ‘Zaxlct’</p><p>var person2 = new Person();<br>person2.sayName(); // ‘Zaxlct’</p><p>console.log(person1.sayName == person2.sayName); //true<br>我们得到了本文第一个「定律」：</p><p>每个对象都有 <strong>proto</strong> 属性，但只有函数对象才有 prototype 属性<br>那什么是原型对象呢？<br>我们把上面的例子改一改你就会明白了：</p><p>Person.prototype = {<br>   name:  ‘Zaxlct’,<br>   age: 28,<br>   job: ‘Software Engineer’,<br>   sayName: function() {<br>     alert(this.name);<br>   }<br>}<br>原型对象，顾名思义，它就是一个普通对象（废话 = =!）。从现在开始你要牢牢记住原型对象就是 Person.prototype ，如果你还是害怕它，那就把它想想成一个字母 A： var A = Person.prototype</p><p>在上面我们给 A 添加了 四个属性：name、age、job、sayName。其实它还有一个默认的属性：constructor</p><p>在默认情况下，所有的原型对象都会自动获得一个 constructor（构造函数）属性，这个属性（是一个指针）指向 prototype 属性所在的函数（Person）<br>上面这句话有点拗口，我们「翻译」一下：A 有一个默认的 constructor 属性，这个属性是一个指针，指向 Person。即：<br>Person.prototype.constructor == Person</p><p>在上面第二小节《构造函数》里，我们知道实例的构造函数属性（constructor）指向构造函数 ：person1.constructor == Person</p><p>这两个「公式」好像有点联系：</p><p>person1.constructor == Person<br>Person.prototype.constructor == Person<br>person1 为什么有 constructor 属性？那是因为 person1 是 Person 的实例。<br>那 Person.prototype 为什么有 constructor 属性？？同理， Person.prototype （你把它想象成 A） 也是Person 的实例。<br>也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，基本过程如下：</p><p> var A = new Person();<br> Person.prototype = A;<br>结论：原型对象（Person.prototype）是 构造函数（Person）的一个实例。</p><p>原型对象其实就是普通对象（但 Function.prototype 除外，它是函数对象，但它很特殊，他没有prototype属性（前面说道函数对象都有prototype属性））。看下面的例子：</p><p> function Person(){};<br> console.log(Person.prototype) //Person{}<br> console.log(typeof Person.prototype) //Object<br> console.log(typeof Function.prototype) // Function，这个特殊<br> console.log(typeof Object.prototype) // Object<br> console.log(typeof Function.prototype.prototype) //undefined<br>Function.prototype 为什么是函数对象呢？</p><p> var A = new Function ();<br> Function.prototype = A;<br>上文提到凡是通过 new Function( ) 产生的对象都是函数对象。因为 A 是函数对象，所以Function.prototype 是函数对象。</p><p>那原型对象是用来做什么的呢？主要作用是用于继承。举个例子：</p><p>  var Person = function(name){<br>    this.name = name; // tip: 当函数执行时这个 this 指的是谁？<br>  };<br>  Person.prototype.getName = function(){<br>    return this.name;  // tip: 当函数执行时这个 this 指的是谁？<br>  }<br>  var person1 = new person(‘Mick’);<br>  person1.getName(); //Mick<br>从这个例子可以看出，通过给 Person.prototype 设置了一个函数对象的属性，那有 Person 的实例（person1）出来的普通对象就继承了这个属性。具体是怎么实现的继承，就要讲到下面的原型链了。</p><p>小问题，上面两个 this 都指向谁？</p><p>  var person1 = new person(‘Mick’);<br>  person1.name = ‘Mick’; // 此时 person1 已经有 name 这个属性了<br>  person1.getName(); //Mick<br>故两次 this 在函数执行时都指向 person1。</p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《平凡的世界》教给我的道理</title>
      <link href="/2018/03/05/%E3%80%8A%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%E6%95%99%E7%BB%99%E6%88%91%E7%9A%84%E9%81%93%E7%90%86/"/>
      <content type="html"><![CDATA[<p>在看《平凡的世界》之前，早就有所听闻，只是这本书的争议一直很大。有人竭力地吹捧，有人使劲地贬低。当时就怀着一份好奇心，到底是什么样的书让众人意见不一?于是在一个失眠的深夜里，我翻开了书的第一页。</p><pre><code>“谨以此书，献给我生活过的土地和岁月。”一周的时间便把这百万字的书看完了，在这一周里，我每天都沉浸在路遥所描绘的那个平凡的世界里，有过喜悦，有过哀伤。在中国近当代小说评价中，对这本书用的最多的一句话是这本书真实的反应了中国近当代城乡结合部在改革的巨大浪潮中的变化。是的，路遥描述了全景式的农村面貌以及那个时代下随着车轮滚滚前进的人们的故事。这本书包含了太多值得我们去思考的东西，此篇读后感我不能说得完全，就让我叙述让我印象深刻的点吧。    首先这本书传播的主要价值观就是人只有劳动才能活得更有价值。这也算是上个世纪七八十年代主要歌颂的品质，大街小巷，都在说着劳动人民最光荣。因为通过劳动不光能带来物质上的满足，同时也能带来精神上的愉悦。“只有劳动才可能使人在生活中强大。不论什么人，最终还是要崇尚那些能用双手创造生活的劳动者。”孙少平和孙少安通过劳动能够释放生活的压力，双脚残废的李向前通过劳动能够找到自己活着的尊严。劳动不是解决温饱问题的工具，更是我们平凡人生的向导。    “人们宁愿去关心一个蹩脚电影演员的吃喝拉撒和鸡毛蒜皮，而不愿了解一个普通人波涛汹涌的内心世界。”这是令我印象最为深刻的句子，它让我对自己处境进行了反思。我们每天关心着娱乐八卦新闻，谁谁离婚了，谁谁又复合了。我们在手机屏幕面前忘我地刷着这些与自己毫无关系的新闻，甚至都不放过任何事件的蛛丝马迹。现在回过头来想，真是内疚，我们有多久没有静静地听自己父母的叮嘱或者身边朋友的观点。平凡的世界，我们都处于其中，时而抬头仰望星空，但切莫因为天上数不尽的星星忽视脚下的路途。  也许是与主人公有着相同的背景，相同的遭遇，每次打开书，我就仿佛看到了多年前的自己。我也是农村的孩子，从小到大所接触的教育根本不能与城市里的孩子相比。中考结束完后，班里有将近一半的人选择出门打工，剩下一半的人有的继续念书，有的学习技术。而那时的我，收到了来自县里重点高中的录取通知书，以为自己打开了另一番天地，全副武装地与这个新鲜的世界交手，可是实际生活是冷酷的。那扇期待了很久的大门，当我手攥钥匙迫不及待地打开时，发现仍是黑暗一片。高中三年，我的学习能力跟别人相比真是大相径庭，成绩在这堆人里不足为谈。无论我如何努力，那种聪明学生的思维我总是学不会。最终，高考失败，落入了一个民办大学。来到这个学校，我又有了一层新的意识。我的室友们全部来自一些小乡村，在这里我并没有任何歧视的意思，只是她们都跟我一样，从小的教育差距，我们都不能改变。而我有一些名牌大学的朋友们，她们身边的同学大多来自高管，公务员或者教师家庭，学习对于他们来说好像是一件不费吹灰之力的事情，从小养成的良好学习习惯，接受到的优秀教育资源，都能让他们很轻松地学习。所以现在很多人都在说寒门再难出贵子，从自己本身这个阶层跻身到更好阶层的人屈指可数。阶层的跨越很难，但我觉得思想的跨越不难。或许我的一生平淡无奇，掀不起一丝波澜壮阔，但我的思想疆域早已风起云涌。对于一个接受过文化教育的人来说，失去了精神生活对于他是多么的痛苦与难熬。我们的思想不应受阶层的束缚，不应局限于如此狭小的天地，不失理想，不忘抱负，方能及别人所不能及， 做别人所不能做。    这本书看完后，给了我巨大的力量，想到他生活中重重的矛盾和艰难挣扎着，但依然不放弃读书，即使身份卑微，即使工作卑贱，他也没有丝毫觉得自己与城市里的人相差甚几。我和孙少平一样，无论遇到什么，读书是我一辈子的事业。也许这里我说的事业具有功利性，但读书就是能够给你带来一笔财富，虽然短时间你看不清也摸不着，但它藏在未来的某一处，就像牧羊少年追随自己天命最终寻找到了宝藏。这本书的争议就算再大，我觉得只要能够给你带来积极的影响，哪怕是一点点就是一本好书。“生活包含着更广阔的意义，而不在于我们实际得到了什么；关键是我们的心灵是否充实。对于生活理想，应该像宗教徒一样充满虔诚与热情。”  最后愿你做个不平庸的人，在平凡的世界里大展拳脚。</code></pre><p>转载自：<br>作者：苏锦然<br>链接：<a href="https://www.jianshu.com/p/b05c86433cff" target="_blank" rel="noopener">https://www.jianshu.com/p/b05c86433cff</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
